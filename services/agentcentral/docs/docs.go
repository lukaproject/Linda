// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/agents/free/{nodeId}": {
            "post": {
                "description": "free node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "free node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "node id",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Node free request",
                        "name": "nodeFreeReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apis.NodeFreeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/agents/info/{nodeId}": {
            "get": {
                "description": "get node info by node id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "get node info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "node id",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.NodeInfo"
                        }
                    }
                }
            }
        },
        "/agents/join/{nodeId}": {
            "post": {
                "description": "join free node to a bag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "join free node to a bag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "node id",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Node join request",
                        "name": "nodeJoinReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apis.NodeJoinReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/agents/list": {
            "get": {
                "description": "list nodes, return node infos by query, query format support prefix=, createAfter=, idAfter=, limit=.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "list nodes, return node infos by query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "find all infos with this prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "find all infos created after this time (ms)",
                        "name": "createAfter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "max count of node infos in result",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "find all node infos which id greater or equal to this id",
                        "name": "idAfter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apis.NodeInfo"
                            }
                        }
                    }
                }
            }
        },
        "/agents/listids": {
            "get": {
                "description": "list nodes, return node ids by query, query format support prefix=, createAfter=, idAfter=, limit=.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "list nodes, return node ids by query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "find all ids with this prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "find all ids created after this time (ms)",
                        "name": "createAfter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "max count of node ids in result",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "find all node ids which id greater or equal to this id",
                        "name": "idAfter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/agents/uploadfiles": {
            "post": {
                "description": "upload files to nodes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "upload files to nodes",
                "parameters": [
                    {
                        "description": "upload files request",
                        "name": "uploadFilesReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apis.UploadFilesReq"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/bagnodes/{bagName}": {
            "get": {
                "description": "list all node ids which belong to this node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bags"
                ],
                "summary": "list bag nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bag's name",
                        "name": "bagName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.ListBagNodesResp"
                        }
                    }
                }
            }
        },
        "/bags": {
            "get": {
                "description": "list bags",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bags"
                ],
                "summary": "list bags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "find all bags which bagName with this prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "find all bags created after this time (ms)",
                        "name": "createAfter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "max count of bags in result",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "find all bags which bagName greater or equal to this id",
                        "name": "idAfter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apis.Bag"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "create a new bag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bags"
                ],
                "summary": "add bag",
                "parameters": [
                    {
                        "description": "bag's request",
                        "name": "addBagReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apis.AddBagReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.AddBagResp"
                        }
                    }
                }
            }
        },
        "/bags/{bagName}": {
            "get": {
                "description": "get bag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bags"
                ],
                "summary": "get bag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bag's name",
                        "name": "bagName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.GetBagResp"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete bag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bags"
                ],
                "summary": "delete bag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bag's name",
                        "name": "bagName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.DeleteBagResp"
                        }
                    }
                }
            }
        },
        "/bags/{bagName}/tasks": {
            "get": {
                "description": "list tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "list tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bag's name",
                        "name": "bagName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "find all tasks which taskName with this prefix",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "find all tasks created after this time (ms)",
                        "name": "createAfter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "max count of tasks in result",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "find all tasks which taskName greater or equal to this id",
                        "name": "idAfter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apis.Task"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "add task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "add task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bag's name",
                        "name": "bagName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "add tasks's request",
                        "name": "addTaskReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apis.AddTaskReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.AddTaskResp"
                        }
                    }
                }
            }
        },
        "/bags/{bagName}/tasks/{taskName}": {
            "get": {
                "description": "get task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "get task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bag's name",
                        "name": "bagName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "task's name",
                        "name": "taskName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.GetTaskResp"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "post": {
                "description": "health check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "health check",
                "responses": {}
            }
        }
    },
    "definitions": {
        "apis.AddBagReq": {
            "type": "object",
            "properties": {
                "bagDisplayName": {
                    "type": "string",
                    "example": "test-bagDisplayName"
                }
            }
        },
        "apis.AddBagResp": {
            "type": "object",
            "properties": {
                "bagDisplayName": {
                    "type": "string"
                },
                "bagName": {
                    "type": "string"
                },
                "createTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "updateTimeMs": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "apis.AddTaskReq": {
            "type": "object",
            "properties": {
                "script": {
                    "type": "string",
                    "example": "echo 1"
                },
                "scriptPath": {
                    "type": "string",
                    "example": "/bin/test.sh"
                },
                "taskDisplayName": {
                    "type": "string",
                    "example": "test-taskDisplayName"
                },
                "workingDir": {
                    "type": "string",
                    "example": "/bin/testWorkingDir/working"
                }
            }
        },
        "apis.AddTaskResp": {
            "type": "object",
            "properties": {
                "bagName": {
                    "type": "string"
                },
                "createTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "exitCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "finishTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodeId": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scheduledTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "script": {
                    "type": "string"
                },
                "scriptPath": {
                    "type": "string"
                },
                "taskDisplayName": {
                    "type": "string"
                },
                "taskName": {
                    "type": "string"
                },
                "workingDir": {
                    "type": "string"
                }
            }
        },
        "apis.Bag": {
            "type": "object",
            "properties": {
                "bagDisplayName": {
                    "type": "string"
                },
                "bagName": {
                    "type": "string"
                },
                "createTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "updateTimeMs": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "apis.DeleteBagResp": {
            "type": "object",
            "properties": {
                "errorMsg": {
                    "type": "string"
                }
            }
        },
        "apis.GetBagResp": {
            "type": "object",
            "properties": {
                "bagDisplayName": {
                    "type": "string"
                },
                "bagName": {
                    "type": "string"
                },
                "createTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "updateTimeMs": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "apis.GetTaskResp": {
            "type": "object",
            "properties": {
                "bagName": {
                    "type": "string"
                },
                "createTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "exitCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "finishTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodeId": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scheduledTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "script": {
                    "type": "string"
                },
                "scriptPath": {
                    "type": "string"
                },
                "taskDisplayName": {
                    "type": "string"
                },
                "taskName": {
                    "type": "string"
                },
                "workingDir": {
                    "type": "string"
                }
            }
        },
        "apis.ListBagNodesResp": {
            "type": "object",
            "properties": {
                "nodeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "apis.NodeFreeReq": {
            "type": "object"
        },
        "apis.NodeInfo": {
            "type": "object",
            "properties": {
                "bagName": {
                    "type": "string"
                },
                "maxRunningTasks": {
                    "type": "integer"
                },
                "nodeId": {
                    "type": "string"
                }
            }
        },
        "apis.NodeJoinReq": {
            "type": "object",
            "properties": {
                "bagName": {
                    "type": "string"
                }
            }
        },
        "apis.Task": {
            "type": "object",
            "properties": {
                "bagName": {
                    "type": "string"
                },
                "createTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "exitCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "finishTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodeId": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scheduledTimeMs": {
                    "type": "integer",
                    "format": "int64"
                },
                "script": {
                    "type": "string"
                },
                "scriptPath": {
                    "type": "string"
                },
                "taskDisplayName": {
                    "type": "string"
                },
                "taskName": {
                    "type": "string"
                },
                "workingDir": {
                    "type": "string"
                }
            }
        },
        "apis.UploadFilesReq": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "locationPath": {
                                "description": "the location of file in node",
                                "type": "string"
                            },
                            "uri": {
                                "description": "File's URI",
                                "type": "string"
                            }
                        }
                    }
                },
                "nodes": {
                    "description": "nodes id list which will receive these files.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.dev",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "AgentCentral API",
	Description:      "This is agent central swagger API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
